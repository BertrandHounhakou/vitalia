// Import des packages n√©cessaires
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:vitalia/data/models/consultation_model.dart';

/// Service Firebase pour g√©rer les consultations m√©dicales
/// Utilis√© par les centres de sant√© pour cr√©er, lire, modifier et supprimer des consultations
class ConsultationService {
  // Instance de Firestore
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Nom de la collection dans Firestore
  final String _collectionName = 'consultations';

  /// Cr√©er une nouvelle consultation
  Future<void> createConsultation(ConsultationModel consultation) async {
    try {
      print('üöÄ ConsultationService: Cr√©ation consultation pour patient ${consultation.patientId}');
      
      await _firestore
          .collection(_collectionName)
          .doc(consultation.id)
          .set(consultation.toFirestore());
      
      print('‚úÖ ConsultationService: Consultation cr√©√©e avec succ√®s');
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur Firestore - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la cr√©ation de la consultation: ${e.message}');
    }
  }

  /// R√©cup√©rer toutes les consultations d'un patient
  Future<List<ConsultationModel>> getPatientConsultations(String patientId) async {
    try {
      print('üîç ConsultationService: R√©cup√©ration consultations patient $patientId');
      
      final querySnapshot = await _firestore
          .collection(_collectionName)
          .where('patientId', isEqualTo: patientId)
          .orderBy('dateTime', descending: true)
          .get();
      
      final consultations = querySnapshot.docs
          .map((doc) => ConsultationModel.fromFirestore(doc))
          .toList();
      
      print('‚úÖ ConsultationService: ${consultations.length} consultations trouv√©es');
      return consultations;
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la r√©cup√©ration des consultations: ${e.message}');
    }
  }

  /// R√©cup√©rer toutes les consultations d'un centre de sant√©
  Future<List<ConsultationModel>> getCenterConsultations(String centerId) async {
    try {
      print('üîç ConsultationService: R√©cup√©ration consultations centre $centerId');
      
      final querySnapshot = await _firestore
          .collection(_collectionName)
          .where('centerId', isEqualTo: centerId)
          .orderBy('dateTime', descending: true)
          .get();
      
      final consultations = querySnapshot.docs
          .map((doc) => ConsultationModel.fromFirestore(doc))
          .toList();
      
      print('‚úÖ ConsultationService: ${consultations.length} consultations trouv√©es');
      return consultations;
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la r√©cup√©ration des consultations: ${e.message}');
    }
  }

  /// R√©cup√©rer une consultation par ID
  Future<ConsultationModel?> getConsultationById(String consultationId) async {
    try {
      final doc = await _firestore
          .collection(_collectionName)
          .doc(consultationId)
          .get();
      
      if (doc.exists) {
        return ConsultationModel.fromFirestore(doc);
      }
      return null;
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la r√©cup√©ration de la consultation: ${e.message}');
    }
  }

  /// Mettre √† jour une consultation existante
  Future<void> updateConsultation(ConsultationModel consultation) async {
    try {
      print('üîÑ ConsultationService: Mise √† jour consultation ${consultation.id}');
      
      await _firestore
          .collection(_collectionName)
          .doc(consultation.id)
          .update(consultation.toFirestore());
      
      print('‚úÖ ConsultationService: Consultation mise √† jour');
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la mise √† jour: ${e.message}');
    }
  }

  /// Supprimer une consultation
  Future<void> deleteConsultation(String consultationId) async {
    try {
      print('üóëÔ∏è ConsultationService: Suppression consultation $consultationId');
      
      await _firestore
          .collection(_collectionName)
          .doc(consultationId)
          .delete();
      
      print('‚úÖ ConsultationService: Consultation supprim√©e');
    } on FirebaseException catch (e) {
      print('‚ùå ConsultationService: Erreur - ${e.code}: ${e.message}');
      throw Exception('Erreur lors de la suppression: ${e.message}');
    }
  }

  /// R√©cup√©rer les consultations r√©centes (pour dashboard)
  Future<List<ConsultationModel>> getRecentConsultations(String centerId, {int limit = 10}) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collectionName)
          .where('centerId', isEqualTo: centerId)
          .orderBy('dateTime', descending: true)
          .limit(limit)
          .get();
      
      return querySnapshot.docs
          .map((doc) => ConsultationModel.fromFirestore(doc))
          .toList();
    } on FirebaseException catch (e) {
      throw Exception('Erreur lors de la r√©cup√©ration: ${e.message}');
    }
  }

  /// Rechercher des consultations par nom de patient ou diagnostic
  Future<List<ConsultationModel>> searchConsultations(String centerId, String query) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collectionName)
          .where('centerId', isEqualTo: centerId)
          .get();
      
      // Filtrage local (Firestore ne supporte pas les recherches textuelles complexes)
      final consultations = querySnapshot.docs
          .map((doc) => ConsultationModel.fromFirestore(doc))
          .where((consultation) =>
              consultation.doctorName.toLowerCase().contains(query.toLowerCase()) ||
              consultation.diagnosis.toLowerCase().contains(query.toLowerCase()) ||
              consultation.reason.toLowerCase().contains(query.toLowerCase()))
          .toList();
      
      return consultations;
    } on FirebaseException catch (e) {
      throw Exception('Erreur lors de la recherche: ${e.message}');
    }
  }
}

