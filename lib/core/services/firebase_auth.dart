import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:vitalia/data/models/user_model.dart';
import 'package:vitalia/core/config/firebase_config.dart';

class FirebaseAuthService {
  final FirebaseAuth _auth = FirebaseConfig.auth;
  final FirebaseFirestore _firestore = FirebaseConfig.firestore;

  // Envoyer un email de v√©rification
  Future<void> sendEmailVerification() async {
    final user = _auth.currentUser;
    if (user != null && !user.emailVerified) {
      try {
        await user.sendEmailVerification();
        print('‚úÖ Email de v√©rification envoy√© √† ${user.email}');
      } catch (e) {
        print('‚ùå Erreur envoi email v√©rification: $e');
        throw Exception('Erreur lors de l\'envoi de l\'email de v√©rification: $e');
      }
    }
  }

  // Inscription utilisateur avec logs d√©taill√©s et email de v√©rification
  Future<UserModel> signUp(UserModel user, String password) async {
    UserCredential? userCredential;
    
    try {
      print('üöÄ FirebaseAuthService: D√©but inscription pour ${user.email}');
      
      // Cr√©ation du compte Firebase Auth
      userCredential = await _auth.createUserWithEmailAndPassword(
        email: user.email,
        password: password,
      );

      print('‚úÖ FirebaseAuthService: Compte Auth cr√©√© - ${userCredential.user!.uid}');

      // ENVOI IMM√âDIAT DE L'EMAIL DE V√âRIFICATION APR√àS CR√âATION DU COMPTE
      try {
        await userCredential.user!.sendEmailVerification();
        print('üìß FirebaseAuthService: Email de v√©rification envoy√© √† ${user.email}');
      } catch (emailError) {
        print('‚ö†Ô∏è FirebaseAuthService: Attention - Erreur envoi email: $emailError');
        // On continue m√™me si l'email √©choue
      }

      // Cr√©ation du document utilisateur dans Firestore
      final userDoc = FirebaseConfig.usersCollection.doc(userCredential.user!.uid);
      
      final userWithId = user.copyWith(
        id: userCredential.user!.uid,
        emailVerified: false, // Marqu√© comme non v√©rifi√©
      );
      
      print('üìù FirebaseAuthService: Cr√©ation document Firestore...');
      
      await userDoc.set(userWithId.toFirestore());

      print('‚úÖ FirebaseAuthService: Document Firestore cr√©√© avec succ√®s');

      return userWithId;
      
    } on FirebaseAuthException catch (e) {
      print('‚ùå FirebaseAuthService: Erreur Auth - ${e.code}: ${e.message}');
      
      // Si l'inscription Auth a r√©ussi mais qu'il y a une erreur apr√®s, supprimer le compte
      if (userCredential?.user != null) {
        try {
          await userCredential!.user!.delete();
          print('üóëÔ∏è Compte Auth supprim√© suite √† une erreur');
        } catch (deleteError) {
          print('‚ö†Ô∏è Erreur lors de la suppression du compte: $deleteError');
        }
      }
      
      throw Exception('Erreur Firebase Auth: ${e.code} - ${e.message}');
    } on FirebaseException catch (e) {
      print('‚ùå FirebaseAuthService: Erreur Firestore - ${e.code}: ${e.message}');
      
      // Si l'inscription Auth a r√©ussi mais Firestore √©choue, supprimer le compte
      if (userCredential?.user != null) {
        try {
          await userCredential!.user!.delete();
          print('üóëÔ∏è Compte Auth supprim√© suite √† une erreur Firestore');
        } catch (deleteError) {
          print('‚ö†Ô∏è Erreur lors de la suppression du compte: $deleteError');
        }
      }
      
      throw Exception('Erreur Firestore: ${e.code} - ${e.message}');
    } catch (e) {
      print('‚ùå FirebaseAuthService: Erreur inattendue: $e');
      
      // Nettoyage en cas d'erreur inattendue
      if (userCredential?.user != null) {
        try {
          await userCredential!.user!.delete();
          print('üóëÔ∏è Compte Auth supprim√© suite √† une erreur inattendue');
        } catch (deleteError) {
          print('‚ö†Ô∏è Erreur lors de la suppression du compte: $deleteError');
        }
      }
      
      throw Exception('Erreur lors de l\'inscription: $e');
    }
  }

  // Renvoyer un email de v√©rification
  Future<void> resendVerificationEmail() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Aucun utilisateur connect√©');
      }
      
      if (user.emailVerified) {
        throw Exception('Email d√©j√† v√©rifi√©');
      }
      
      await user.sendEmailVerification();
      print('üìß Email de v√©rification renvoy√© √† ${user.email}');
    } catch (e) {
      print('‚ùå Erreur renvoi email v√©rification: $e');
      throw Exception('Erreur lors du renvoi de l\'email de v√©rification: $e');
    }
  }

  // V√©rifier si l'email est v√©rifi√©
  Future<bool> checkEmailVerified() async {
    // Recharger l'utilisateur pour avoir les donn√©es √† jour
    await _auth.currentUser?.reload();
    return _auth.currentUser?.emailVerified ?? false;
  }

  // Connexion utilisateur avec logs d√©taill√©s
  Future<UserModel> signIn(String email, String password) async {
    try {
      print('üöÄ FirebaseAuthService: Tentative connexion pour $email');
      
      final UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      print('‚úÖ FirebaseAuthService: Connexion Auth r√©ussie - ${userCredential.user!.uid}');

      // V√©rifier si l'email est v√©rifi√©
      if (!userCredential.user!.emailVerified) {
        print('‚ö†Ô∏è FirebaseAuthService: Email non v√©rifi√© pour $email');
        // Vous pouvez choisir de throw une exception ou de continuer
        // throw Exception('Veuillez v√©rifier votre adresse email avant de vous connecter');
      }

      // R√©cup√©ration des donn√©es utilisateur depuis Firestore
      final userDoc = await FirebaseConfig.usersCollection.doc(userCredential.user!.uid).get();
      
      if (!userDoc.exists) {
        print('‚ùå FirebaseAuthService: Document utilisateur non trouv√© dans Firestore');
        throw Exception('Utilisateur non trouv√© dans la base de donn√©es');
      }

      print('‚úÖ FirebaseAuthService: Donn√©es Firestore r√©cup√©r√©es avec succ√®s');
      
      return UserModel.fromFirestore(userDoc);
      
    } on FirebaseAuthException catch (e) {
      print('‚ùå FirebaseAuthService: Erreur Auth - ${e.code}: ${e.message}');
      throw Exception('Erreur Firebase Auth: ${e.code} - ${e.message}');
    } on FirebaseException catch (e) {
      print('‚ùå FirebaseAuthService: Erreur Firestore - ${e.code}: ${e.message}');
      throw Exception('Erreur Firestore: ${e.code} - ${e.message}');
    } catch (e) {
      print('‚ùå FirebaseAuthService: Erreur inattendue: $e');
      throw Exception('Erreur lors de la connexion: $e');
    }
  }

  // D√©connexion
  Future<void> signOut() async {
    try {
      print('üöÄ FirebaseAuthService: D√©connexion en cours...');
      await _auth.signOut();
      print('‚úÖ FirebaseAuthService: D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå FirebaseAuthService: Erreur d√©connexion: $e');
      throw Exception('Erreur lors de la d√©connexion: $e');
    }
  }

  // Utilisateur courant
  User? get currentUser => _auth.currentUser;

  // V√©rifier si connect√©
  bool get isLoggedIn => _auth.currentUser != null;

  // R√©cup√©rer l'utilisateur actuel depuis Firestore
  Future<UserModel> getCurrentUser() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Aucun utilisateur connect√©');
      }

      final userDoc = await FirebaseConfig.usersCollection.doc(user.uid).get();
      
      if (!userDoc.exists) {
        throw Exception('Profil utilisateur non trouv√©');
      }

      return UserModel.fromFirestore(userDoc);
    } catch (e) {
      print('‚ùå FirebaseAuthService: Erreur r√©cup√©ration utilisateur: $e');
      throw Exception('Erreur lors de la r√©cup√©ration du profil: $e');
    }
  }

  // V√©rifier si l'email est d√©j√† utilis√©
  Future<bool> checkEmailExists(String email) async {
    try {
      final methods = await _auth.fetchSignInMethodsForEmail(email);
      return methods.isNotEmpty;
    } catch (e) {
      print('‚ùå FirebaseAuthService: Erreur v√©rification email: $e');
      return false;
    }
  }
}